{"version":3,"file":"index.js","sources":["../src/components/Input/index.tsx","../src/useMermaid.tsx","../src/components/Mermaid.tsx","../src/components/Field/index.tsx","../schemas/mermaid.ts","../src/index.ts"],"sourcesContent":["import { useCallback } from 'react';\n\nimport {\n  set,\n  StringInputProps,\n  unset,\n} from 'sanity';\n\nimport { TextInput } from '@sanity/ui';\n\nexport default function Input(props: StringInputProps) {\n  const {elementProps, onChange, value = ''} = props\n\n  const handleChange = useCallback(\n    (event: { currentTarget: { value: any; }; } ) => {\n      const nextValue = event.currentTarget.value\n      onChange(nextValue ? set(nextValue) : unset())\n    },\n    [onChange],\n  )\n\n  return (\n      <TextInput {...elementProps} onChange={handleChange} value={value} />\n  )\n}\n","import {\n  useEffect,\n  useState,\n} from 'react';\n\nimport mermaid from 'mermaid';\n\nexport default function useMermaid(graph = '', id = 'mermaid', options?:  Record<string,any>) {\n  const [svg, setSvg] = useState<Element>()\n\n  useEffect(() => {\n    mermaid.mermaidAPI.initialize({\n      startOnLoad: true,\n      theme: options?.theme || 'neutral',\n    })\n  }, [])\n\n  useEffect(() => {\n    try {\n      mermaid.parse(graph)\n      mermaid.mermaidAPI.render(\n        id,\n        graph,\n        new HTMLDivElement\n      )\n    } catch (err) {\n\n    }\n  }, [graph, setSvg])\n\n  return [svg || '']\n}\n","import {\n  MutableRefObject,\n  useEffect,\n  useRef,\n} from 'react';\n\nimport { Badge } from '@sanity/ui';\n\nimport useMermaid from '../useMermaid';\n\nexport default function Mermaid ({\n  graph,\n  id,\n  options = {},\n  fallback = 'Invalid graph definition'\n}: Record<string, any>) {\n  const [valid, html] = useMermaid(graph, id, options)\n  const ref: MutableRefObject<any> = useRef()\n\n  useEffect(() => {\n    const content = valid ? html : ''\n    if (ref.current) {\n      ref.current.innerHTML = content\n    }\n  }, [valid, html])\n\n  return (\n    <>\n      <div key=\"faux\" id={id} />\n      <div key='preview' ref={ref} />\n      {!valid && <Badge color='warning'>{fallback}</Badge>}\n    </>\n  )\n}","import { useCallback } from 'react';\n\nimport {\n  set,\n  unset,\n} from 'sanity';\n\nimport {\n  Stack,\n  ThemeProvider,\n} from '@sanity/ui';\n\nimport Input from '../Input';\nimport Mermaid from '../Mermaid';\n\nexport default function Field(props: any, ref: any,) {\n  const {elementProps, onChange, value = ''} = props;\n  const handleChange = useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) =>\n      onChange(event.currentTarget.value ? set(event.currentTarget.value) : unset()),\n    [onChange],\n  )\n  return (\n    <ThemeProvider>\n      <Stack space={3}>\n        <Input {...elementProps} onChange={handleChange} value={value} ref={ref}   />\n        <Mermaid graph={value}  />\n      </Stack>\n    </ThemeProvider>\n  )\n}","import {\n  defineField,\n  defineType,\n} from 'sanity';\n\nimport Field from '../src/components/Field';\n\nexport default defineType({\n  title: 'Mermaid graph',\n  name: 'mermaid',\n  type: 'object',\n  fields: [\n    defineField({\n      type: 'text',\n      name: 'definition',\n      title: 'Graph definition',\n      components: {\n        field: Field\n      },\n    }),\n  ],\n})\n","import { definePlugin } from 'sanity';\n\nimport mermaidSchema from '../schemas/mermaid';\n\ninterface mermaidConfig {\n  /* nothing here yet */\n}\n\n/**\n * Usage in `sanity.config.ts` (or .js)\n *\n * ```ts\n * import {defineConfig} from 'sanity'\n * import {myPlugin} from 'sanity-plugin-mermaid'\n *\n * export default defineConfig({\n *   // ...\n *   plugins: [myPlugin()],\n * })\n * ```\n */\nexport const mermaid = definePlugin<mermaidConfig | void>((config = {}) => {\n  return {\n    name: 'sanity-plugin-mermaid',\n    schema: {\n      types: [mermaidSchema],\n    },\n  }\n})\n"],"names":["Input","props","elementProps","onChange","value","handleChange","useCallback","event","nextValue","currentTarget","set","unset","TextInput","useMermaid","graph","arguments","length","undefined","id","options","svg","setSvg","useState","useEffect","mermaid","default","mermaidAPI","initialize","startOnLoad","theme","parse","render","HTMLDivElement","err","Mermaid","_ref","fallback","valid","html","ref","useRef","content","current","innerHTML","jsxs","Fragment","children","jsx","Badge","color","Field","ThemeProvider","Stack","space","mermaidSchema","defineType","title","name","type","fields","defineField","components","field","definePlugin","config","schema","types"],"mappings":";;;;;;;;;;;;;;;;AAUA,SAAwBA,MAAMC,KAAyB,EAAA;EACrD,MAAM;IAACC,YAAA;IAAcC,QAAU;IAAAC,KAAA,GAAQ;GAAM,GAAAH,KAAA;EAE7C,MAAMI,YAAe,GAAAC,KAAA,CAAAA,WAAA,CAClBC,KAAgD,IAAA;IACzC,MAAAC,SAAA,GAAYD,MAAME,aAAc,CAAAL,KAAA;IACtCD,QAAA,CAASK,SAAY,GAAAE,MAAA,CAAAA,GAAA,CAAIF,SAAS,CAAA,GAAIG,MAAAA,CAAAA,MAAO,CAAA,CAAA;EAC/C,CAAA,EACA,CAACR,QAAQ,CAAA,CACX;EAEA,qCACKS,EAAW,CAAAA,SAAA,EAAA;IAAA,GAAGV,YAAc;IAAAC,QAAA,EAAUE;IAAcD;EAAc,CAAA,CAAA;AAEzE;ACjBA,SAAwBS,UAAWA,CAAA,EAA2D;EAAA,IAA3DC,KAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAQ,EAAI;EAAA,IAAAG,EAAA,GAAAH,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAK;MAAWI,OAA+B,GAAAJ,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;EAC5F,MAAM,CAACG,GAAA,EAAKC,MAAM,CAAA,GAAIC,KAAkB,CAAAA,QAAA,CAAA,CAAA;EAExCC,KAAAA,CAAAA,SAAA,CAAU,MAAM;IACdC,gBAAA,CAAAC,OAAA,CAAQC,WAAWC,UAAW,CAAA;MAC5BC,WAAa,EAAA,IAAA;MACbC,KAAA,EAAA,CAAOV,mCAASU,KAAS,KAAA;IAAA,CAC1B,CAAA;EACH,CAAA,EAAG,EAAE,CAAA;EAELN,KAAAA,CAAAA,SAAA,CAAU,MAAM;IACV,IAAA;MACFC,wBAAA,CAAQM,MAAMhB,KAAK,CAAA;MACnBU,gBAAA,CAAAC,OAAA,CAAQC,UAAW,CAAAK,MAAA,CACjBb,EAAA,EACAJ,KAAA,EACA,IAAIkB,cAAA,CAAA,CAAA,CACN;aACOC,GAAK,EAAA,CAEd;EAAA,CACC,EAAA,CAACnB,KAAO,EAAAO,MAAM,CAAC,CAAA;EAEX,OAAA,CAACD,OAAO,EAAE,CAAA;AACnB;ACrBA,SAAwBc,OAASA,CAAAC,IAAA,EAKT;EAAA,IALS;IAC/BrB,KAAA;IACAI,EAAA;IACAC,UAAU,CAAC,CAAA;IACXiB,QAAW,GAAA;EACb,CAAwB,GAAAD,IAAA;EACtB,MAAM,CAACE,KAAO,EAAAC,IAAI,IAAIzB,UAAW,CAAAC,KAAA,EAAOI,IAAIC,OAAO,CAAA;EACnD,MAAMoB,MAA6BC,KAAAA,CAAAA,MAAO,EAAA;EAE1CjB,KAAAA,CAAAA,SAAA,CAAU,MAAM;IACR,MAAAkB,OAAA,GAAUJ,QAAQC,IAAO,GAAA,EAAA;IAC/B,IAAIC,IAAIG,OAAS,EAAA;MACfH,GAAA,CAAIG,QAAQC,SAAY,GAAAF,OAAA;IAC1B;EAAA,CACC,EAAA,CAACJ,KAAO,EAAAC,IAAI,CAAC,CAAA;EAEhB,sBAEIM,UAAA,CAAAA,IAAA,CAAAC,mBAAA,EAAA;IAAAC,QAAA,EAAA,CAACC,eAAAA,UAAAA,CAAAA,GAAA,CAAA,KAAA,EAAA;MAAe7B;OAAP,MAAe,CAAA,EACxB6B,eAAAA,UAAAA,CAAAA,GAAA,CAAC,KAAkB,EAAA;MAAAR;IAAA,CAAA,EAAV,SAAoB,CAAA,EAC5B,CAACF,KAAS,IAAA,eAAAU,UAAA,CAAAA,GAAA,CAACC,QAAM,EAAA;MAAAC,KAAA,EAAM;MAAWH,QAAS,EAAAV;KAAA,CAAA;EAC9C,CAAA,CAAA;AAEJ;AClBwB,SAAAc,KAAAA,CAAMjD,OAAYsC,GAAW,EAAA;EACnD,MAAM;IAACrC,YAAA;IAAcC,QAAU;IAAAC,KAAA,GAAQ;GAAM,GAAAH,KAAA;EAC7C,MAAMI,YAAe,GAAAC,KAAA,CAAAA,WAAA,CAClBC,KAAA,IACCJ,QAAS,CAAAI,KAAA,CAAME,aAAc,CAAAL,KAAA,GAAQM,UAAI,CAAAH,KAAA,CAAME,aAAc,CAAAL,KAAK,CAAI,GAAAO,MAAA,CAAAA,KAAA,CAAA,CAAO,CAAA,EAC/E,CAACR,QAAQ,CAAA,CACX;EACA,sBACG4C,UAAA,CAAAA,GAAA,CAAAI,gBAAA,EAAA;IACCL,QAAC,EAAAF,eAAAA,UAAAA,CAAAA,IAAA,CAAAQ,EAAAA,CAAAA,KAAA,EAAA;MAAMC,OAAO,CACZ;MAAAP,QAAA,EAAA,CAAA,eAAAC,cAAA,CAAC/C;QAAO,GAAGE,YAAA;QAAcC,QAAU,EAAAE,YAAA;QAAcD;QAAcmC;OAAY,CAAA,EAC3EQ,eAAAA,UAAAA,CAAAA,GAAA,CAACb,OAAQ,EAAA;QAAApB,KAAA,EAAOV;MAAQ,CAAA,CAAA;IAC1B,CAAA;EACF,CAAA,CAAA;AAEJ;ACvBA,IAAAkD,aAAA,GAAeC,iBAAW,CAAA;EACxBC,KAAO,EAAA,eAAA;EACPC,IAAM,EAAA,SAAA;EACNC,IAAM,EAAA,QAAA;EACNC,MAAQ,EAAA,CACNC,kBAAY,CAAA;IACVF,IAAM,EAAA,MAAA;IACND,IAAM,EAAA,YAAA;IACND,KAAO,EAAA,kBAAA;IACPK,UAAY,EAAA;MACVC,KAAO,EAAAZ;IACT;EAAA,CACD,CAAA;AAEL,CAAC,CAAA;ACAM,MAAM1B,OAAU,GAAAuC,MAAA,CAAAA,YAAA,CAAmC,YAAiB;EAAA,IAAhBC,MAAA,GAAAjD,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAS,EAAO;EAClE,OAAA;IACL0C,IAAM,EAAA,uBAAA;IACNQ,MAAQ,EAAA;MACNC,KAAA,EAAO,CAACZ,aAAa;IACvB;EAAA,CACF;AACF,CAAC,CAAA;"}